// Mixins.
@mixin nl {
    margin: 0;
    padding: 0;
    text-indent: 0;
    list-style: none;
    list-style-position: outside;
}

@mixin cf {
    &:before,
    &:after {
        display: table;
        content: "";
    }
    &:after {
        clear: both;
    }
    .lt-ie8 & {
        zoom: 1;
    }
}

@mixin blocks-justify {
    text-align: justify;
    text-justify: newspaper;
}

@mixin absolut-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin all-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

@function rem($size) {
    @return ($size/16) + rem;
}

@mixin font-face($name, $file, $weight: normal, $style: normal) {
    @font-face {
        font-family: "#{$name}";
        src: url("#{$file}.eot");
        src: url("#{$file}.eot?#iefix") format("embedded-opentype"),
            url("#{$file}.woff") format("woff"),
            url("#{$file}.ttf") format("truetype"),
            url("#{$file}.svg?#webfont") format("svg");
        font-weight: $weight;
        font-style: $style;
    }
}

$breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1366px
) !default;

/* 
* Default mobile-first mixin 
* @param {String} $breakpoint - Breakpoint key in Sass map
* @param {Map} $map - Sass list map of breakpoints
*/

@mixin media($breakpoint, $map: $breakpoints) {
    @if type-of($map) == map {
        @if map-has-key($map, $breakpoint) {
            @media (min-width: #{map-get($map, $breakpoint)}) {
                @content;
            }
        } @else {
            @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Please make sure it is defined in breakpoints map.";
        }
    } @else {
        @warn "Unfortunately, the map `#{$map}` isn't defined or is invalid.";
    }
}

/* 
* Hack mobile-first mixin
* @param {String} $breakpoint - Breakpoint key in Sass map
*/

@mixin media-max($breakpoint) {
    $max-width: get-next($breakpoint, $map: $breakpoints);
    @media (max-width: $max-width - 1) {
        @content;
    }
}

@mixin media-only($breakpoint, $map: $breakpoints) {
    @if type-of($map) == map {
        @if map-has-key($map, $breakpoint) {
            @media only screen and (max-width: #{map-get($map, $breakpoint)}) {
                @content;
            }
        } @else {
            @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Please make sure it is defined in breakpoints map.";
        }
    } @else {
        @warn "Unfortunately, the map `#{$map}` isn't defined or is invalid.";
    }
}

/*
* Function to get next map item
* @author Simon Koch
*
* @param {Map} $map - Sass list map
* @param {String} $key - List map key
*
*/

@function get-next($key, $map) {
    @if map-has-key($map, $key) {
        $i: 0;
        $key-index: false;

        @each $map-key, $map-value in $map {
            $i: $i + 1;

            @if $map-key == $key {
                $key-index: $i;
            }

            @if $i == $key-index + 1 {
                @return $map-value;
            }

            @if $i == length($map) {
                @return $map-value;
            }
        }
    }
}
